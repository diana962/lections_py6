# 1) '''Магическими называются даты, в которых произведение дня и месяца
# составляет последние две цифры года. Например, 10 июня 1960 года –
# магическая дата, поскольку 10 ´ 6 = 60. Напишите функцию, определя-
# ющую, является ли введенная дата магической. Используйте написан-
# ную функцию в главной программе для отображения всех магических
# дат в XX ве­ке.'''

# #
# def magical_number(day = input('Enter a day: '), month = input('Enter a month in digits: '), year = input('Enter a year: ')):
#     return ('magical number' if int(day) * int(month) == int(str(year)[2:]) else 'No magic in this numbers. ')
# print(magical_number())

# 2) '''Напишите функцию для определения количества дней в конкретном ме-
# сяце. Ваша функция должна принимать два параметра: номер месяца
# в виде целого числа в диапазоне от 1 до 12 и год, состоящий из четырех
# цифр. Убедитесь, что функция корректно обрабатывает февраль високос-
# ного года. В основной программе запросите у пользователя номер месяца
# и год и отобразите на экране количество дней в указанном месяце.'''
# def qDays(month = int(input('Enter a month in digits(1-12): ')),  year = int(input('Enter a year: '))):
#     return('31' if month in {1, 3, 5, 7, 8, 10, 12} else ('30' if month in {4, 6, 9, 11} else('29' if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else 28)))
# print(qDays())

# 3) '''Напишите две функции с именами hex2int и int2hex для конвертации
# значений из шестнадцатеричной системы счисления (0, 1, 2, 3, 4, 5, 6, 7,
# 8, 9, A, B, C, D, E и F) в десятичную (по основанию 10) и обратно. Функ-
# ция hex2int должна принимать на вход строку с единственным символом
# в шестнадцатеричной системе и преобразовывать его в число от нуля
# до 15 в десятичной системе, тогда как функция int2hex будет выполнять
# обратное действие – принимать десятичное число из диапазона от 0 до
# 15 и возвращать шестнадцатеричный эквивалент. Обе функции должны
# принимать единственный параметр со входным значением и возвращать
# преобразованное число. Удостоверьтесь, что функция hex2int корректно
# обрабатывает буквы в верхнем и нижнем регистрах. Если введенное поль-
# зователем значение выходит за допустимые границы, вы должны вывести
# сообщение об ошибке.'''

# def hex2int(str): #21F = (2 × 16**2) + (1 × 16**1) + (15 × 16**0) = 512 + 16 + 15 = 543
#     # print(str)
#     bukvy = {'a': '10', 'b': '11', 'c': '12', 'd': '13', 'e': '14', 'f': '15'}
#     res1 = str[::-1]
#     # print(res1)
#     result = []
#     for i in res1:
#         if i in bukvy:
#             x = bukvy[i]
#             res = int(x) * (16 ** res1.index(i))
#             result.append(res)
#         elif i not in bukvy:
#             res2 = int(i) * (16 ** res1.index(i))
#             result.append(res2)
#     return (f'Конвертация: {str} из шестнадцатеричной системы в десятичную: {sum(result)}')

# print(hex2int('21F'.lower()))

# def int2hex(num = int(input('Enter a number in range(0, 15): '))):
#     if 0 >= num >= 15:
#         print('Enter in range от 0 до 15')
#     else:
#         bukvy = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}
#         if num > 9:
#             print(f'Конвертация: {num} из шестнадцатеричной системы в десятичную: {bukvy[num]}')
#         else:
#             print(f'Конвертация: {num} из шестнадцатеричной системы в десятичную: {num}')
# print(int2hex())

# 4) '''Представьте, что в вашем регионе устаревшим является формат номер-
# ных автомобильных знаков из трех букв, следом за которыми идут три
# цифры. Когда все номера такого шаблона закончились, было решено об-
# новить формат, поставив в начало четыре цифры, а за ними три буквы.
# Напишите функцию, которая будет генерировать случайный номерной
# знак. При этом номера в старом и новом форматах должны создаваться
# примерно с одинаковой вероятностью. В основной программе нужно сге-
# нерировать и вывести на экран случайный номерной знак.'''

# import random
# import string

# def nomernoi_znak():
#     znak = ''.join(random.choices(string.digits, k=4)) + ''.join(random.choices(string.ascii_uppercase, k=3))
#     return znak
# print(nomernoi_znak())