# """
# 1) Объявите 3 переменных, запишите в них строку, список и словарь. Затем запишите их в список, и пройдитесь по нему циклом чтобы распечатать длину сразу каждого из объектов.
# """
# a = 'Dear'
# b = [1, 2]
# c = {1: 2}

# my_list = [a, b, c]

# for item in my_list:
#     print(len(item))
# """
# 2) Создайте классы Dog и Cat с одинаковым методом voice. Для собак он должен печатать "Гав", для кошек "Мяу".
# Объявите для каждого из классов по экземпляру. Затем объявить функцию to_pet(), которая будет принимать животное и вызывать у него метод voice()
# """
# """
# 3. Создайте 2 класса: MyInt и MyString, наследуйте MyInt от int, MyString от str. У обоих
# классов переопределите метод, который отвечает за работу с оператором “+”.
# Напишите функцию add_objects(), которая принимает объект одного из 2 типов.
# При сложении объектов класса MyInt должно выдаваться сообщение “Это сложение”, а
# потом идти логика сложения 2 чисел, и выдача результата.
# При конкатенации объектов класса MyString() Должно выдаваться сообщение: “Это
# конкатенация”, а затем логика конкатенации из базового класса и выдача результата.
# """
# # писать код здесь
# """
# 4) Создайте 3 класса: Person, Employee и Student, при этом Employee и Student должны наследоваться от Person. Определите во всех трёх классах метод get_info():
# -для класса Person он должен принимать и возвращать следующее: “Привет, меня зовут Иван Петров”.
# -для класса Employee он должен принимать и возвращать: “Привет, меня зовут Иван Петров, я работаю в компании “Рога и копыта” на должности “директор”.
# -для класса Student должно приниматься и возвращаться: “Привет, меня зовут Иван Петров, я учусь в КГТУ на 3 курсе”.
# Определите функцию get_human_info(), которая будет принимать объект одного из трёх классов, вызывать метод get_info и печатать результат.
# """
# # писать код здесь
# """
# 5) Объявите абстрактный класс геометрических фигур Shape и определите в нём абстрактный метод get_area() для расчёта площади фигуры, которые необходимо переопределить в дочерних классах.

# Затем наследуйте от Shape три класса: Triangle, Square и Circle.
# -треугольник создаётся с заданными основанием и высотой
# -квадрат создаётся с заданной длиной стороны
# -круг создаётся с заданным радиусом
# Переопределите в каждом из классов метод get_area() таким образом, чтобы он рассчитывал площадь для конкретной фигуры.

# Затем создайте от каждого из трёх классов по экземпляру, и вызовите у каждого метод get_area()

# Подсказка: для создания абстрактных классов воспользуйтесь модулем abc
# """
# # писать код здесь

















# Основные Концепции:
# 1) Абстракция: Создать абстрактный класс Транспортное Средство, который будет базовым для всех типов транспорта.
# 2) Наследование: Разработать классы Грузовик, Легковой Автомобиль и Мотоцикл, наследующие от Транспортное Средство.
# 3) Полиморфизм: Реализовать методы, такие как двигаться, загружать и разгружать, которые будут работать по-разному для разных типов транспортных средств.
# 4) Миксины: Включить миксин, например GPSМиксин, который добавляет функциональность GPS в транспортные средства.
# Задачи:
# Абстрактный Класс Транспортное Средство:

# Определите атрибуты, общие для всех транспортных средств (например, марка, модель, год выпуска).
# Определите абстрактные методы двигаться, загружать и разгружать.
# Классы Грузовик, Легковой Автомобиль и Мотоцикл:

# Наследуйте эти классы от Транспортное Средство.
# Реализуйте методы двигаться, загружать и разгружать по-своему для каждого типа транспорта.
# Миксин GPSМиксин:

# Добавьте методы для отслеживания местоположения транспорта.
# Интегрируйте этот миксин с классами транспортных средств.
# Тестирование:

# Создайте несколько экземпляров каждого типа транспортного средства.
# Продемонстрируйте полиморфизм, вызывая общие методы на разных объектах.
# Покажите работу GPS-функциональности.
# Это задание позволит студентам практиковаться в применении концепций ООП в Python, а также познакомит их с реальной ситуацией, где эти практики могут быть полезны.